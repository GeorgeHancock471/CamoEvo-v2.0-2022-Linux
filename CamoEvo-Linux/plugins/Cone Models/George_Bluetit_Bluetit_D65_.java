// Code automatically generated by 'Generate Cone Mapping Model' script by Jolyon Troscianko

//Model fits:
//lw 0.9971417324985052
//mw 0.996908038281982
//sw 0.9948557373515282
//uv 0.9940266633321008
//dbl 0.9964986386733841


// Generated: 2022/3/28   10:7:29


import ij.*;
import ij.plugin.filter.PlugInFilter;
import ij.process.*;

public class George_Bluetit_Bluetit_D65_ implements PlugInFilter {

ImageStack stack;
	public int setup(String arg, ImagePlus imp) { 
	stack = imp.getStack(); 
	return DOES_32 + STACK_REQUIRED; 
	}
public void run(ImageProcessor ip) {

IJ.showStatus("Cone Mapping");
float[] visibleR;
float[] visibleG;
float[] visibleB;
float[] uvB;
float[] uvR;
int w = stack.getWidth();
int h = stack.getHeight();
int dimension = w*h;

float[] lw = new float[dimension];
float[] mw = new float[dimension];
float[] sw = new float[dimension];
float[] uv = new float[dimension];
float[] dbl = new float[dimension];

visibleR = (float[]) stack.getPixels(1);
visibleG = (float[]) stack.getPixels(2);
visibleB = (float[]) stack.getPixels(3);
uvB = (float[]) stack.getPixels(4);
uvR = (float[]) stack.getPixels(5);

for (int i=0;i<dimension;i++) {
lw[i] = (float) (-0.008888110093443742 +(visibleR[i]*0.012526202498462686)+(visibleG[i]*-0.001642922389855438)+(visibleB[i]*2.788533473608408E-4)+(uvB[i]*-0.005725479015177318)+(uvR[i]*0.0043945694240652335)+(visibleR[i]*visibleG[i]*2.071000488052086E-5)+(visibleR[i]*visibleB[i]*-3.38169713989784E-5)+(visibleR[i]*uvB[i]*1.69585306816525E-4)+(visibleR[i]*uvR[i]*-1.6770375112768512E-4)+(visibleG[i]*visibleB[i]*-1.881360185208537E-5)+(visibleG[i]*uvB[i]*9.223858605303686E-5)+(visibleG[i]*uvR[i]*-7.837298052211032E-5)+(visibleB[i]*uvB[i]*-7.045541214958863E-5)+(visibleB[i]*uvR[i]*8.876011008367802E-5)+(uvB[i]*uvR[i]*3.5728309764896397E-6));
mw[i] = (float) (-0.009678691168419113 +(visibleR[i]*-0.0017099629769913394)+(visibleG[i]*0.01667128800234212)+(visibleB[i]*-0.005240045812770325)+(uvB[i]*5.163175204017192E-4)+(uvR[i]*1.2894530189791188E-4)+(visibleR[i]*visibleG[i]*-3.9887782590700826E-7)+(visibleR[i]*visibleB[i]*-1.5789817383595243E-7)+(visibleR[i]*uvB[i]*1.4485904940663593E-4)+(visibleR[i]*uvR[i]*-1.4060504529117576E-4)+(visibleG[i]*visibleB[i]*7.0005461353892865E-6)+(visibleG[i]*uvB[i]*-3.269809613903518E-4)+(visibleG[i]*uvR[i]*2.8433243961542906E-4)+(visibleB[i]*uvB[i]*9.126222096925351E-5)+(visibleB[i]*uvR[i]*-4.126781397893154E-5)+(uvB[i]*uvR[i]*-2.1558453455715037E-5));
sw[i] = (float) (-0.009409164837934608 +(visibleR[i]*5.278308793651337E-4)+(visibleG[i]*-0.0026827740248865275)+(visibleB[i]*0.012229431560187937)+(uvB[i]*0.002851050753131818)+(uvR[i]*-0.002935102065419599)+(visibleR[i]*visibleG[i]*-3.2359548525850437E-6)+(visibleR[i]*visibleB[i]*2.413032824442399E-5)+(visibleR[i]*uvB[i]*4.205371619274235E-5)+(visibleR[i]*uvR[i]*-6.340003869580831E-5)+(visibleG[i]*visibleB[i]*-6.242589099865395E-6)+(visibleG[i]*uvB[i]*-2.4078508822476536E-4)+(visibleG[i]*uvR[i]*2.4358703453348566E-4)+(visibleB[i]*uvB[i]*6.41962150390465E-5)+(visibleB[i]*uvR[i]*-7.778752960068322E-5)+(uvB[i]*uvR[i]*3.102042340752003E-5));
uv[i] = (float) (-0.011439281965847889 +(visibleR[i]*2.0136194793077231E-4)+(visibleG[i]*-6.960641157548169E-4)+(visibleB[i]*0.0014881120128274585)+(uvB[i]*0.005797270142106367)+(uvR[i]*0.003724929020817907)+(visibleR[i]*visibleG[i]*-8.077551421335553E-6)+(visibleR[i]*visibleB[i]*4.1929393659830744E-5)+(visibleR[i]*uvB[i]*1.0904145260936801E-5)+(visibleR[i]*uvR[i]*-5.177939454727978E-5)+(visibleG[i]*visibleB[i]*-2.476795694576682E-5)+(visibleG[i]*uvB[i]*-1.7092675211340631E-4)+(visibleG[i]*uvR[i]*2.0854912575926006E-4)+(visibleB[i]*uvB[i]*1.0979490196077161E-4)+(visibleB[i]*uvR[i]*-1.3688199789080026E-4)+(uvB[i]*uvR[i]*2.3498395211188538E-5));
dbl[i] = (float) (-0.009931616948393247 +(visibleR[i]*0.0026742081591026277)+(visibleG[i]*0.008545988160344731)+(visibleB[i]*-4.493725495932594E-4)+(uvB[i]*-0.001107312685693145)+(uvR[i]*2.8416204754588267E-4)+(visibleR[i]*visibleG[i]*5.299209266653808E-6)+(visibleR[i]*visibleB[i]*-5.830425943457789E-6)+(visibleR[i]*uvB[i]*7.968062365475625E-5)+(visibleR[i]*uvR[i]*-8.117637580339061E-5)+(visibleG[i]*visibleB[i]*-8.66781824360905E-6)+(visibleG[i]*uvB[i]*-3.798754862866605E-5)+(visibleG[i]*uvR[i]*2.350790490522101E-5)+(visibleB[i]*uvB[i]*-5.229866282972942E-5)+(visibleB[i]*uvR[i]*8.239363961577477E-5)+(uvB[i]*uvR[i]*1.22859257462806E-6));
IJ.showProgress((float) i/dimension);
}

ImageStack outStack = new ImageStack(w, h);
outStack.addSlice("lw", lw);
outStack.addSlice("mw", mw);
outStack.addSlice("sw", sw);
outStack.addSlice("uv", uv);
outStack.addSlice("dbl", dbl);
new ImagePlus("Output", outStack).show();

}
}
