// Code automatically generated by 'Generate Cone Mapping Model' script by Jolyon Troscianko

//Model fits:
//lw 0.9820409128810524
//mw 0.989135030983439
//sw 0.9942068187475981
//dbl 0.9895409537088123


// Generated: 2020/0/21   13:53:52


import ij.*;
import ij.plugin.filter.PlugInFilter;
import ij.process.*;

public class Cubot_Quest_Lite_Bluetit_LMS_D65_ implements PlugInFilter {

ImageStack stack;
	public int setup(String arg, ImagePlus imp) { 
	stack = imp.getStack(); 
	return DOES_32 + STACK_REQUIRED; 
	}
public void run(ImageProcessor ip) {

IJ.showStatus("Cone Mapping");
float[] visibleR;
float[] visibleG;
float[] visibleB;
int w = stack.getWidth();
int h = stack.getHeight();
int dimension = w*h;

float[] lw = new float[dimension];
float[] mw = new float[dimension];
float[] sw = new float[dimension];
float[] dbl = new float[dimension];

visibleR = (float[]) stack.getPixels(1);
visibleG = (float[]) stack.getPixels(2);
visibleB = (float[]) stack.getPixels(3);

for (int i=0;i<dimension;i++) {
lw[i] = (float) (0.006894326084737875 +(visibleR[i]*0.005835141425477412)+(visibleG[i]*0.0035810489011470926)+(visibleB[i]*-6.709548397411898E-5)+(visibleR[i]*visibleG[i]*1.578318020641859E-5)+(visibleR[i]*visibleB[i]*2.092253422251385E-6)+(visibleG[i]*visibleB[i]*1.0845295820013844E-6));
mw[i] = (float) (0.01769681295072209 +(visibleR[i]*-7.133617925370684E-4)+(visibleG[i]*0.010875080009714388)+(visibleB[i]*-0.0011539194513950236)+(visibleR[i]*visibleG[i]*1.2473755020479672E-5)+(visibleR[i]*visibleB[i]*1.2047865511986767E-5)+(visibleG[i]*visibleB[i]*-8.439896147738442E-6));
sw[i] = (float) (0.017865406212630233 +(visibleR[i]*-6.551857121159054E-4)+(visibleG[i]*0.0018264272830826069)+(visibleB[i]*0.007905309554279009)+(visibleR[i]*visibleG[i]*2.822928009444771E-6)+(visibleR[i]*visibleB[i]*-2.4480662494276324E-6)+(visibleG[i]*visibleB[i]*9.834350933854177E-6));
dbl[i] = (float) (0.014453453000660164 +(visibleR[i]*0.001114123277165765)+(visibleG[i]*0.00745743071604603)+(visibleB[i]*5.081145841699583E-4)+(visibleR[i]*visibleG[i]*1.1974057124187964E-5)+(visibleR[i]*visibleB[i]*4.930110046160672E-6)+(visibleG[i]*visibleB[i]*2.1365679196121085E-7));
IJ.showProgress((float) i/dimension);
}

ImageStack outStack = new ImageStack(w, h);
outStack.addSlice("lw", lw);
outStack.addSlice("mw", mw);
outStack.addSlice("sw", sw);
outStack.addSlice("dbl", dbl);
new ImagePlus("Output", outStack).show();

}
}
