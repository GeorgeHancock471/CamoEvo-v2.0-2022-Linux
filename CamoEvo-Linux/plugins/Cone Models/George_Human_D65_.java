// Code automatically generated by 'Generate Cone Mapping Model' script by Jolyon Troscianko

//Model fits:
//lw 0.9965450361673146
//mw 0.996894222095665
//sw 0.9926999551804345


// Generated: 2021/10/10   14:8:3


import ij.*;
import ij.plugin.filter.PlugInFilter;
import ij.process.*;

public class George_Human_D65_ implements PlugInFilter {

ImageStack stack;
	public int setup(String arg, ImagePlus imp) { 
	stack = imp.getStack(); 
	return DOES_32 + STACK_REQUIRED; 
	}
public void run(ImageProcessor ip) {

IJ.showStatus("Cone Mapping");
float[] visibleR;
float[] visibleG;
float[] visibleB;
float[] uvB;
float[] uvR;
int w = stack.getWidth();
int h = stack.getHeight();
int dimension = w*h;

float[] lw = new float[dimension];
float[] mw = new float[dimension];
float[] sw = new float[dimension];

visibleR = (float[]) stack.getPixels(1);
visibleG = (float[]) stack.getPixels(2);
visibleB = (float[]) stack.getPixels(3);
uvB = (float[]) stack.getPixels(4);
uvR = (float[]) stack.getPixels(5);

for (int i=0;i<dimension;i++) {
lw[i] = (float) (-0.011045833634886643 +(visibleR[i]*0.003313794554719274)+(visibleG[i]*0.009187888102342832)+(visibleB[i]*-0.0017187828698964618)+(uvB[i]*-0.0021506246955655755)+(uvR[i]*0.0013993730431737883)+(visibleR[i]*visibleG[i]*6.684645092753609E-6)+(visibleR[i]*visibleB[i]*-4.3657863391938886E-7)+(visibleR[i]*uvB[i]*9.949329389381135E-5)+(visibleR[i]*uvR[i]*-1.0829830441055702E-4)+(visibleG[i]*visibleB[i]*-1.894734342690704E-5)+(visibleG[i]*uvB[i]*-6.021220463918295E-5)+(visibleG[i]*uvR[i]*5.7628261075447764E-5)+(visibleB[i]*uvB[i]*-6.97695468838208E-6)+(visibleB[i]*uvR[i]*3.29692545172844E-5)+(uvB[i]*uvR[i]*1.7249554568617374E-6));
mw[i] = (float) (-0.009279625149044263 +(visibleR[i]*-1.1281610591989301E-4)+(visibleG[i]*0.01234469887460797)+(visibleB[i]*-0.00174544762402534)+(uvB[i]*2.7571374381617366E-4)+(uvR[i]*-7.589163264904713E-4)+(visibleR[i]*visibleG[i]*5.689775686188688E-7)+(visibleR[i]*visibleB[i]*-1.0946319751126146E-6)+(visibleR[i]*uvB[i]*6.318756814097429E-5)+(visibleR[i]*uvR[i]*-5.900999841864369E-5)+(visibleG[i]*visibleB[i]*-1.5755142973682339E-6)+(visibleG[i]*uvB[i]*-9.71475654870028E-5)+(visibleG[i]*uvR[i]*6.511591161464072E-5)+(visibleB[i]*uvB[i]*-3.756839266662539E-5)+(visibleB[i]*uvR[i]*7.906352136451627E-5)+(uvB[i]*uvR[i]*-6.6449396395039296E-6));
sw[i] = (float) (-0.011233062961034861 +(visibleR[i]*8.717405478000395E-4)+(visibleG[i]*-0.004308912376453008)+(visibleB[i]*0.013389169945227979)+(uvB[i]*0.0017429465930525606)+(uvR[i]*-0.001489292390327913)+(visibleR[i]*visibleG[i]*-3.4429433293261713E-6)+(visibleR[i]*visibleB[i]*4.8687028026542895E-5)+(visibleR[i]*uvB[i]*8.559686093123751E-5)+(visibleR[i]*uvR[i]*-1.300114209651504E-4)+(visibleG[i]*visibleB[i]*-2.8487979696982455E-5)+(visibleG[i]*uvB[i]*-4.1200401019420664E-4)+(visibleG[i]*uvR[i]*4.440075621148047E-4)+(visibleB[i]*uvB[i]*2.378333667025595E-4)+(visibleB[i]*uvR[i]*-2.743315772452774E-4)+(uvB[i]*uvR[i]*4.1910896235231506E-5));
IJ.showProgress((float) i/dimension);
}

ImageStack outStack = new ImageStack(w, h);
outStack.addSlice("lw", lw);
outStack.addSlice("mw", mw);
outStack.addSlice("sw", sw);
new ImagePlus("Output", outStack).show();

}
}
