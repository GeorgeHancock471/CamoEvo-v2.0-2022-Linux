/*____________________________________________________________________

	Title: Measure LAB Values
	Authors:  George Hancock and Jolyon Troscianko
	Date: 19/04/22
	
.................................................................................................................

Description:
''''''''''''''''''''''''''''''''
Recreates the stimuli used. Allowing for it to be measured by CamoEvo.

*/


// STEP 0, Select Measurement Tool
///==========================================================================================

popDIR = getDirectory("population");

FolderName=File.getName(popDIR);
saveDIR = popDIR + "Data_Measures_" + FolderName +".txt";

measureMethodsDIR = getDirectory("plugins") + "2 CamoReq/ImageAnalysis";
measureList = getFileList(measureMethodsDIR);

measureTypes = newArray();

for(i=0;i<measureList.length;i++){
tStr = measureList[i];

if(startsWith(tStr, "Measure_")){

nStr = replace(tStr, ".txt", "");
nStr = replace(nStr, "_", " ");

measureTypes = Array.concat(measureTypes,nStr);

}
}



Dialog.createNonBlocking("MeasureMethod");
Dialog.addMessage("__Choose the measurement method__");
		Dialog.addChoice("Measure", measureTypes);
Dialog.show();

measureMethod = Dialog.getChoice();


setBatchMode(true);



// Index
//---------------------------------------------------
// Allows you to obtain the index of a Value within an Array.

  function index(a, value) {
      for (i=0; i<a.length; i++)
          if (a[i]==value) return i;
      return -1;
  }
  




while(roiManager("count") > 0){
roiManager("select", Array.getSequence(roiManager("count")));
roiManager("delete");
}


// STEP 1, Select the Generation
///==========================================================================================

currentDefault = File.getDefaultDir;


checkDir1 = currentDefault ;
checkDir2 = replace(checkDir1, "Populations", "");


if(checkDir1.length == checkDir2.length) File.setDefaultDir(getDirectory("plugins") + "1 CamoEvo/Populations/");






fileList  =  getFileList(popDIR);

Leng = lengthOf(fileList );

completedGen = newArray();
dataSet = newArray();


for(i=0; i<Leng; i++) { 
		if(endsWith(fileList[i], "_ranks.txt")!=1 && startsWith(fileList[i], "gen")==1 ){
			completedGen = Array.concat(completedGen, fileList[i]);
		}
		
		if(startsWith(fileList[i], "Data_Output")==1 ){
			dataSet = Array.concat(dataSet, fileList[i]);
		}
	
	}
	

numGenArray = Array.getSequence(completedGen.length);	


useDataSetGate = 0;


//If there are no generation .txt
// Then recreate stimuli with the recreator.


oldCheck=1;
if(!File.exists(popDIR + "gen_0_ranks")) oldCheck=0;

if(numGenArray.length<1 || oldCheck==0){

	if(dataSet.length>0 ){
	
	dataSet = File.openAsString(popDIR + dataSet[0]);
	dataRows = split(dataSet,"\n");
	finalGen = split(dataRows[dataRows.length-1], "\t");
	numGenArray = Array.getSequence(finalGen[0]+1);	
	
	useDataSetGate = 1; 
	}


}



	popSettings = File.openAsString(popDIR + "Settings_Population.txt");
	popRows = split(popSettings, "\n");
	popSize = split(popRows[2], "\t");
	popSize = parseFloat(popSize[1]);
	
	numPerSlide = split(popRows[3],"\t");
	numPerSlide = parseFloat(numPerSlide [1]);
	
	
	tempA = split(popRows[12],"\t");
	numberRepeats = parseFloat(tempA[1]);
	startGen=0;
	
	
	if(File.exists(saveDIR)){
	currentMeasures = File.openAsString(saveDIR);
	currentMArray = split(currentMeasures,"\n");
	//Array.show(currentMArray);
	
		if((currentMArray.length-1)/(popSize*numberRepeats) != parseInt((currentMArray.length-1)/(popSize*numberRepeats))){
		while((currentMArray.length-1)/(popSize*numberRepeats) != parseInt((currentMArray.length-1)/(popSize*numberRepeats))){
		currentMArray=Array.deleteIndex(currentMArray,currentMArray.length-1);
		}//while
		
		
		
		File.delete(saveDIR);
			for(i=0;i<currentMArray.length;i++){
			File.append(currentMArray[i],saveDIR);
			}//i
		
		}//if
	
	startGen=((currentMArray.length-1)/(popSize*numberRepeats));
	}//if

for(B=startGen;B<numGenArray.length;B++){
genChoice = B;



// STEP 2, Get the Records
///==========================================================================================

//useDataSetGate=0;

if(useDataSetGate == 0){

genDIR = popDIR + "gen_" + genChoice;

recordDIR = genDIR + "_ranks.txt";

recordText = File.openAsString(recordDIR);

recordLines = split(recordText, "\n");

}


	
	
	
	


if(useDataSetGate == 1){



	startLine = (genChoice*popSize*numberRepeats)+1;
	stopLine = ((genChoice+1)*popSize*numberRepeats)+1;

	recordLabels = split(dataRows[0],"\t");
	recordLines = Array.slice(dataRows,startLine,stopLine); 


	TargetChoice =  split(popRows[0], "\t");
	TargetChoice =  TargetChoice[1];

	TargetDirectory = getDirectory("plugins")+ "1 CamoEvo/Targets/";

	TargetSettings = File.openAsString(TargetDirectory+"Target_Settings.txt");
	TargetSettingsRows = split(TargetSettings , "\n");

	for(i=0; i<TargetSettingsRows.length; i++){
	temp = TargetSettingsRows[i];

	if(startsWith(temp, TargetChoice)){
	TargetSetting = temp;
	}

	}

	TargetChoiceSettings = split(TargetSetting, "\t");

	TargetChoiceScale = parseFloat(TargetChoiceSettings[2]);
	TargetPatternChoice = TargetChoiceSettings[3];
	TargetChoiceMinRotation = parseFloat(TargetChoiceSettings[5]);
	TargetChoiceMaxRotation = parseFloat(TargetChoiceSettings[6]);

}






// If files exist
if(useDataSetGate == 0){

recordLabels = split(recordLines[0],"\t");

bgArray = newArray(recordLines.length-1);
idArray = newArray(recordLines.length-1);
xArray = newArray(recordLines.length-1);
yArray = newArray(recordLines.length-1);
fArray = newArray(recordLines.length-1);
aArray = newArray(recordLines.length-1);
cXArray = newArray(recordLines.length-1);
cYArray = newArray(recordLines.length-1);

bgIndex = index(recordLabels,"Background");
idIndex = index(recordLabels,"ID");
xIndex = index(recordLabels,"Target_X");
yIndex = index(recordLabels,"Target_Y");
flipIndex = index(recordLabels,"Flip");
angleIndex = index(recordLabels,"Angle");
cXIndex = index(recordLabels,"Crop_X");
cYIndex = index(recordLabels,"Crop_Y");

for(i=0;i<recordLines.length-1;i++){

tArray = split(recordLines[i+1],"\t");

bgArray[i] = tArray[bgIndex];
idArray[i] = tArray[idIndex];
xArray[i] = parseFloat(tArray[xIndex]);
yArray[i] = parseFloat(tArray[yIndex]);
fArray[i] = tArray[flipIndex];
aArray[i] = parseFloat(tArray[angleIndex]);
cXArray[i] = parseFloat(tArray[cXIndex]);
cYArray[i] = parseFloat(tArray[cYIndex]);

}
}

// If files don't exist
if(useDataSetGate == 1){

bgArray = newArray(recordLines.length);
idArray = newArray(recordLines.length);
xArray = newArray(recordLines.length);
yArray = newArray(recordLines.length);
fArray = newArray(recordLines.length);
aArray = newArray(recordLines.length);
cXArray = newArray(recordLines.length);
cYArray = newArray(recordLines.length);



bgIndex = index(recordLabels,"Image_ID");
idIndex = index(recordLabels,"ID");
xIndex = index(recordLabels,"X_Coordinate");
yIndex = index(recordLabels,"Y_Coordinate");
flipIndex = index(recordLabels,"Flip");
angleIndex = index(recordLabels,"Rotation");
cXIndex = index(recordLabels,"Crop_X");
cYIndex = index(recordLabels,"Crop_Y");

Array.show(recordLabels);

for(i=0;i<recordLines.length;i++){

tArray = split(recordLines[i],"\t");



bgArray[i] = tArray[bgIndex];
idArray[i] = tArray[idIndex];
xArray[i] = parseFloat(tArray[xIndex]);
yArray[i] = parseFloat(tArray[yIndex]);
fArray[i] = tArray[flipIndex];
aArray[i] = parseFloat(tArray[angleIndex]);
cXArray[i] = parseFloat(tArray[cXIndex]);
cYArray[i] = parseFloat(tArray[cYIndex]);

}
}



targetROIs = newArray(bgArray.length);
localROIs = newArray(bgArray.length);

// STEP 3, Get Population Settings
///==========================================================================================

gameSetDIR = popDIR + "Settings_Game.txt";
gameSetText = File.openAsString(gameSetDIR);
gameSetList = split(gameSetText, "\n");


temp = split(gameSetList[10],"\t");
cropW=parseFloat(temp[1]);

temp = split(gameSetList[11],"\t");
cropH=parseFloat(temp[1]);


popSetDIR = popDIR + "Settings_Population.txt";

popSetText =  File.openAsString(popSetDIR);

popSetList = split(popSetText, "\n");

TargetSet = split(popSetList[0],"\t");
TargetSetting = TargetSet[1];

TargetChoice = TargetSetting;


// Get Scales
TargetDirectory = getDirectory("plugins")+ "1 CamoEvo/Targets/";

TargetSettings = File.openAsString(TargetDirectory+"Target_Settings.txt");
TargetSettingsRows = split(TargetSettings , "\n");

for(i=0; i<TargetSettingsRows.length; i++){
temp = TargetSettingsRows[i];

if(startsWith(temp, TargetChoice)){
TargetSetting = temp;
}

}

TargetChoiceSettings = split(TargetSetting, "\t");

TargetChoiceScale = parseFloat(TargetChoiceSettings[2]);
TargetPatternChoice = TargetChoiceSettings[3];
TargetChoiceMinRotation = parseFloat(TargetChoiceSettings[5]);
TargetChoiceMaxRotation = parseFloat(TargetChoiceSettings[6]);

targetDir = popDIR + "GenPat_"+genChoice+"/";
backgroundDIR = popDIR + "Backgrounds/";



gameSet = popDIR+"Settings_Game.txt";
gameSettings = File.openAsString(gameSet);
gameSettings = split(gameSettings , "\n");
tArr = split(gameSettings[0],"\t");
TargetSize = tArr[1];
TargetChoiceScale = replace(TargetSize,"px","");
TargetChoiceScale = parseFloat(TargetChoiceScale);



//targetMod
//.........
tArr = split(gameSettings[14],"\t");
targetMod = tArr[1];

//imageMod
//.........
tArr = split(gameSettings[15],"\t");
imageMod = tArr[1];





// STEP 4, Create Image(s)
///==========================================================================================

for(A=0; A<bgArray.length; A++){
setBatchMode(true);

//Values
//-----------------
backgroundChoice = backgroundDIR+bgArray[A];
targetChoice = targetDir+idArray[A]+".tif";
flipChoice = fArray[A];
rotationChoice = parseFloat(aArray[A]);
xCoord = parseFloat(xArray[A]);
yCoord = parseFloat(yArray[A]);
nameNumber = A;

cxCoord = parseFloat(cXArray[A]);
cyCoord = parseFloat(cYArray[A]);


//Load Bg & Target
//-----------------

open(backgroundChoice);
rename("Background");
makeRectangle(cxCoord,cyCoord,cropW,cropH);
run("Crop");



// If files exist
if(File.exists(targetChoice)){
	open(targetChoice);
	rename("Target");
	
	
	if(targetMod != "none"){
	run(targetMod);
	}

	
}

// If files don't exist
if(!File.exists(targetChoice)){

if(A==0){

//Send Over Genes
//----------------------------------------------------------------------------------	

	titles = split(dataRows[0],"\t");
	startIndex = index(titles, "Parent1");
	templateRows = Array.slice(titles, startIndex, titles.length); 
	templateRows =  Array.concat(titles[1], 	templateRows);
	templateRows = String.join(templateRows, "\t");
	
	
	dataFile = File.open(getDirectory("plugins") + "2 CamoReq/PopLocation.txt");
	
		print(dataFile, popDIR);
		
	File.close(dataFile);
	


popGenes = getDirectory("plugins") + "2 CamoReq/PatternTemplate.txt";
dataFile = File.open(popGenes);
print(dataFile,templateRows);

for(i=0; i<idArray.length; i++){

	row = split(recordLines[i],"\t");
	genes = Array.slice(row, startIndex, row.length);
	genes = Array.concat(row[1], genes);
	genes = String.join(genes, "\t");
	
	
	standardString = 	genes;


		print(dataFile,genes);
		
} // i

File.close(dataFile);

generateString = "Generate "+ TargetPatternChoice;

run(generateString);

		
}

selectImage(idArray[A]);
rename("Target");

}






//Adjust Target
//-----------------

//print(rotationChoice);

run("Select All");

if(flipChoice == "horizontal") run("Flip Horizontally");

run("Rotate... ", "angle=&rotationChoice grid=1 interpolation=None");

run("Size...", "width=&TargetChoiceScale  height=&TargetChoiceScale  depth=1 constrain interpolation=None");



selectImage("Target");
		run("Select All");
		run("Duplicate...", "title=mask");
		run("8-bit");
		setThreshold(1, 255);
		
		run("Create Selection");
		roiManager("Add");
		roiManager("select", roiManager("count")-1);
		rename("copy");
		
		run("Select All");
		roiManager("Add")
		roiManager("select", roiManager("count")-1);
		rename("copySquare");
		
		roiManager("deselect");
		
		close("copySquare");
		
		selectImage("Target");

		roiManager("Select", roiManager("Count")-1);
		run("Copy");
	


//Paste Target
//-----------------

selectImage("Background");

		roiManager("Select", roiManager("Count")-1);
		Roi.getBounds(oldX, oldY, oldWidth, oldHeight);


		
		Roi.move(xCoord, yCoord);
		roiManager("update");

		setPasteMode("Transparent-zero");
		run("Paste");
		//run("Gaussian Blur...", "sigma=0.5 slice");
		

	

		roiManager("Select", roiManager("Count")-2);
		
		Roi.getBounds(x, y, width, height);
		
		targetROIx = xCoord +(x-oldX);
		targetROIy = yCoord +(y-oldY);

		Roi.move(targetROIx, targetROIy);
		roiManager("Add");
		
		roiManager("select", roiManager("Count")-3);
		roiManager("delete");

// Create ROIs
//-----------------

roiManager("Select", roiManager("Count")-1);
roiManager("rename", idArray[A]);
roiManager("deselect");

roiManager("Select", roiManager("Count")-2);

run("Fit Circle");
run("Scale... ", "x=2 y=2 centered");
roiManager("Add");

		//Save Coord
		Roi.getBounds(x, y, width, height);
		
		cPoints = newArray(x,y,width,height);
		cPoints = String.join(cPoints, "&");
		localROIs[A] = cPoints;

roiManager("Select", roiManager("Count")-3);
roiManager("delete");


roiManager("Select", newArray(roiManager("Count")-1, roiManager("Count")-2 ) );
roiManager("XOR");
roiManager("Add");



run("Select All");
roiManager("Add");

roiManager("Select", newArray(roiManager("Count")-1, roiManager("Count")-2 ) );
roiManager("AND");
roiManager("Add");
roiManager("Select", roiManager("Count")-1);
roiManager("rename", "local_"+nameNumber);

roiManager("Select", newArray(roiManager("Count")-2,roiManager("Count")-3, roiManager("Count")-4) );
roiManager("delete");


roiManager("select", roiManager("count")-2);

if(imageMod != "none"){
run(imageMod);
}

//run("Gaussian Blur...", "sigma=0.1 slice");



// Save ROI coordinates
//---------------------------------

//Target
//------
roiManager("select", roiManager("count")-2);
Roi.getCoordinates(xpoints, ypoints);
xPoints = String.join(xpoints, "&");
yPoints = String.join(ypoints, "&");
cPoints = xPoints+"_"+yPoints;

targetROIs[A] = cPoints;



if((A-numPerSlide+1)/numPerSlide == parseInt((A-numPerSlide+1)/numPerSlide)) rename(nameNumber);

close("Target");

roiManager("select",0);
run("Interpolate", "interval=1");
roiManager("update");
roiManager("select",0);



// Make Measures
//---------------------------------

genArray=Array.concat(genArray,B);


//setResult("Generation",nResults,B);

popString = "choose-population=["+popDIR+"]";

rename("Background");
run("Select None");
run("Duplicate...", "title=TargetMask");
run("8-bit");
run("Select None");
run("Set...","value=0");
roiManager("Select",roiManager("count")-2);
run("Set...","value=255");

run("Select None");
run("Duplicate...", "title=LocalMask");
run("8-bit");
run("Select None");
run("Set...","value=0");
roiManager("Select",roiManager("count")-1);
run("Set...","value=255");


//setBatchMode("exit and display");
//exit
run(measureMethod, popString); // Measure




run("Clear Results");

while(roiManager("count")>0){
roiManager("select", 0);
roiManager("delete");
}




} // (A)


}//(B);

print("MEASUREMENTS COMPLETE!");
